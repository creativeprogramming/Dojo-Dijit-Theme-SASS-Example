/* claro/form/Common.css */

/*========================= common css =========================*/

/* 'dijitTextBox' refers to 'dijit(TextBox|DateTextBox|CurrencyTextBox|...)' */

.#{$theme} .dijitTextBox,
.#{$theme} .dijitInputInner {
    // .dijitInputInner selector needed for ValidationTextBox on IE6 because <input> doesn't inherit
    // the color setting from the ancestor div.dijitTextBox
	color: $text-color;
}

.#{$theme} .dijitSelectError .dijitValidationContainer,
.#{$theme} .dijitTextBoxError .dijitValidationContainer {
	background-color: $erroricon-background-color;
	background-image: url("#{$image-form-error}");
	background-position: top center;
	border: solid $erroricon-background-color 0;
	width: 9px;
}

.#{$theme} .dijitTextBoxError .dijitValidationContainer {
	border-left-width: 1px;
}

.#{$theme} .dijitSelectError .dijitValidationIcon,
.#{$theme} .dijitTextBoxError .dijitValidationIcon {
	width: 0;
	background-color: transparent !important; /* so the INPUT doesn't obscure the border in rtl+a11y */
}

/* Padding for the input area of TextBox based widgets, and corresponding padding for the
 * down arrow button and the placeholder.   placeholder is explicitly listed  because
 * dijitPlaceHolder is absolutely positioned, so padding set on dijitInputField
 * won't affect it
 */
.#{$theme} .dijitTextArea,
.#{$theme} .dijitInputField .dijitPlaceHolder {
	padding: $textbox-padding;
}

.#{$theme} .dijitSelect .dijitInputField,
.#{$theme} .dijitTextBox .dijitInputField {
	// Subtract 1px from top/bottom because we add 1px to other nodes, see rules below.
	// Although we are theoretically only adding 1px to top/bottom browsers seem to pad inputs by 1px on left/right,
	// although that varies by so compensate for that too.
	padding: $textbox-padding - 1px  $textbox-padding;
}

.dj_gecko .#{$theme} .dijitTextBox .dijitInputInner,
.dj_webkit .#{$theme} .dijitTextBox .dijitInputInner {
	// Although we are theoretically only adding 1px to top/bottom, some browsers seem to pad inputs by 1px on left/right,
	// so compensate for that too.
	padding: $textbox-padding - 1px;
}

.#{$theme} .dijitSelect,
.#{$theme} .dijitSelect .dijitButtonContents,
.#{$theme} .dijitTextBox,
.#{$theme} .dijitTextBox .dijitButtonNode {
	/* color for (outer) border on *TextBox widgets, and border between input and buttons on ComboBox and Spinner */
	border-color: $border-color;
	@include transition-property-2(background-color, border);
 	@include transition-duration(.35s);
}

.#{$theme} .dijitSelect,
.#{$theme} .dijitTextBox {
	background-color: $textbox-background-color;
}

/* hover */
.#{$theme} .dijitSelectHover,
.#{$theme} .dijitSelectHover .dijitButtonContents,
.#{$theme} .dijitTextBoxHover,
.#{$theme} .dijitTextBoxHover .dijitButtonNode {
	border-color: $hovered-border-color;
 	@include transition-duration(.25s);
}

.#{$theme} .dijitTextBoxHover {
	background-color: $textbox-hovered-background-color;
	@include textbox-background-image;
}

/* error state */
.#{$theme} .dijitSelectError,
.#{$theme} .dijitSelectError .dijitButtonContents,
.#{$theme} .dijitTextBoxError,
.#{$theme} .dijitTextBoxError .dijitButtonNode {
	border-color: $error-border-color;
}

/* focused state */
.#{$theme} .dijitSelectFocused,
.#{$theme} .dijitSelectFocused .dijitButtonContents,
.#{$theme} .dijitTextBoxFocused,
.#{$theme} .dijitTextBoxFocused .dijitButtonNode {
	border-color:$focused-border-color;
 	@include transition-duration(.1s);
}

.#{$theme} .dijitTextBoxFocused {
	background-color: $textbox-focused-background-color;
	@include textbox-background-image;
}
.#{$theme} .dijitTextBoxFocused .dijitInputContainer {
	background: $textbox-focused-background-color;
}

.#{$theme} .dijitSelectErrorFocused,
.#{$theme} .dijitSelectErrorFocused .dijitButtonContents,
.#{$theme} .dijitTextBoxErrorFocused,
.#{$theme} .dijitTextBoxErrorFocused .dijitButtonNode {
	border-color: $error-focused-border-color;
}

/* disabled state */
.#{$theme} .dijitSelectDisabled,
.#{$theme} .dijitSelectDisabled .dijitButtonContents,
.#{$theme} .dijitTextBoxDisabled,
.#{$theme} .dijitTextBoxDisabled .dijitButtonNode {
	border-color: $disabled-border-color;
}

.#{$theme} .dijitSelectDisabled,
.#{$theme} .dijitTextBoxDisabled,
.#{$theme} .dijitTextBoxDisabled .dijitInputContainer {
	background-color: $textbox-disabled-background-color;
	background-image: none;
}

.#{$theme} .dijitSelectDisabled,
.#{$theme} .dijitTextBoxDisabled,
.#{$theme} .dijitTextBoxDisabled .dijitInputInner {
	color: $disabled-text-color;
}

.dj_webkit .#{$theme} .dijitDisabled input {
    /* because WebKit lightens disabled input/textarea no matter what color you specify */
	color: darken($disabled-text-color, 5%)
}

.dj_webkit .#{$theme} textarea.dijitTextAreaDisabled {
    /* because WebKit lightens disabled input/textarea no matter what color you specify */
	color: darken($disabled-text-color, 40%)
}

/*========================= for special widgets =========================*/

/* Input boxes with an arrow (for a drop down) */

.#{$theme} .dijitSelect .dijitArrowButtonInner,
.#{$theme} .dijitComboBox .dijitArrowButtonInner {
	background-image: url("#{$image-form-common-arrows}");
	background-position:-35px 53%;
	background-repeat: no-repeat;
	margin: 0;
	width:16px;
}

.#{$theme} .dijitComboBox .dijitArrowButtonInner {
	border: 1px solid $arrowbutton-inner-border-color;	// white gutter around the arrow button
}

.#{$theme} .dijitToolbar .dijitComboBox .dijitArrowButtonInner {
	border: none;
}

.#{$theme} .dijitToolbar .dijitComboBox .dijitArrowButtonInner {
	border: none;
}

/* Add 1px vertical padding to the <input> where user types and the validation icon,
   to match the 1px border on arrow button */
.#{$theme} .dijitSelect .dijitValidationContainer,
.#{$theme} .dijitSelectLabel,
.#{$theme} .dijitTextBox .dijitInputInner,
.#{$theme} .dijitTextBox .dijitValidationContainer {
	padding: 1px 0;
}

.#{$theme} .dijitComboBox .dijitButtonNode {
	background-color: $arrowbutton-background-color;
	@include standard-gradient("");
}

/* Arrow "hover" effect:
 * The arrow button should change color whenever the mouse is in a position such that clicking it
 * will toggle the drop down.   That's either (1) anywhere over the ComboBox or (2) over the arrow
 * button, depending on the openOnClick setting for the widget.
 */
.#{$theme} .dijitComboBoxOpenOnClickHover .dijitButtonNode,
.#{$theme} .dijitComboBox .dijitDownArrowButtonHover {
	background-color:$arrowbutton-hovered-background-color;
}

.#{$theme} .dijitComboBoxOpenOnClickHover .dijitArrowButtonInner,
.#{$theme} .dijitComboBox .dijitDownArrowButtonHover .dijitArrowButtonInner {
	background-position:-70px 53%;
}

/* Arrow Button change when drop down is open */
.#{$theme} .dijitComboBox .dijitHasDropDownOpen {	// .dijitHasDropDown is on dijitArrowButton node
	background-color: $pressed-background-color;
	@include active-gradient("");
	padding: 1px;		// Since no border on arrow button (see rule below)
}	

.dj_iequirks .#{$theme} .dijitComboBox .dijitHasDropDownOpen {
	padding: 1px 0;
}

.#{$theme} .dijitComboBox .dijitHasDropDownOpen .dijitArrowButtonInner {
	background-position:-70px 53%;
	border: 0 none;
}

/* disabled state */
.#{$theme} div.dijitComboBoxDisabled .dijitArrowButtonInner {
	/* specific selector set to override background-position setting from Button.js
	 * (.#{$theme} .dijitComboBoxDisabled .dijitArrowButtonInner) */
	background-position:0 50%;
	background-color:$disabled-background-color;
}

/*========================= hacks for browsers =========================*/
/* it seems the input[type="hidden"] has a height (16px) too... this may cause the widget's height calculate error */
.dj_ff3 .#{$theme} .dijitInputField input[type="hidden"] {
	display: none;
	height: 0;
	width: 0;
}

.dj_borderbox .#{$theme} .dijitComboBox .dijitHasDropDownOpen .dijitArrowButtonInner {
	width:18px;				// quirks mode means border-box sizing, so 18px with the border (same as 16px without border)
}

.dj_borderbox .#{$theme} .dijitComboBoxFocused .dijitHasDropDownOpen .dijitArrowButtonInner {
	width:16px;				// when no border, then back to 16px just like content-box sizing
}
